{"version":3,"sources":["components/AddCategory.js","helpers/getGift.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cast","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAmB5C,OACI,sBAAMC,SAZY,SAACC,GAEnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACvCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAUT,EACVU,SApBc,SAAEP,GACxBF,EAAeE,EAAEQ,OAAOF,a,+BCNnBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCAPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OACI,sBAAKc,UAAU,0CAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAON,IACtB,kCAAMA,EAAN,WCFCO,EAAU,SAAC,GAAoB,IAAjBnB,EAAgB,EAAhBA,SAAgB,ECFf,SAAEA,GAAe,IAAD,EAEdd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAiBxC,OAVAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAd,GACHY,EAAS,CACLf,KAAMG,EACNU,SAAS,SAGtB,CAAEpB,IAEEqB,EDbiBI,CAAczB,GAA/BO,EAFgC,EAEhCA,KAAMa,EAF0B,EAE1BA,QAEb,OACI,qCACI,qBAAIJ,UAAU,qCAAd,cAAsDhB,EAAtD,OAEEoB,GAAW,mBAAGJ,UAAU,qCAAb,0BAEb,qBAAKA,UAAU,YAAf,SACI,6BAEQT,EAAKE,KAAK,SAAEC,GAAF,OACN,cAAC,EAAD,eAESA,GADGA,EAAIC,eEgB7Be,EAhCM,WAAK,MAGcxC,mBAAS,CAAC,cAHxB,mBAGfyC,EAHe,KAGH1C,EAHG,KAUtB,OACI,qCACG,gDACA,cAAC,EAAD,CAAaA,cAAkBA,IAC/B,uBAIC,6BAEQ0C,EAAWlB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAaA,GADNA,Y,MCnBnC4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.1f6613f6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes  from  'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = ( e ) =>{\n        setInputValue( e.target.value );\n    }\n\n    const handledSummit = (e) =>{\n        \n        e.preventDefault();\n\n        if(inputValue.trim().length > 2 ){\n            setCategories( cast=> [ inputValue, ...cast]);\n            setInputValue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit = { handledSummit }>\n            <input \n                type=\"text\"\n                value = { inputValue }\n                onChange = { handleInputChange }\n            />\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}","\n\nexport const getGift = async ( category ) =>{\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&api_key=7T8tmgAm2qbX1nwKUxbgGCvLtJDBCSWp&limit=10`;\n    const resp = await fetch( url );\n    const { data } = await resp.json();\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url,\n        }\n    });\n    return gifs;\n};","import React from 'react'\n\nexport const GifGridItem = ( {id, title, url} ) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn \">\n            <img src={url} alt = {title} />\n            <p> { title } </p>\n            {/* { img.title} */}\n        </div>\n    )\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n//import React, { useState, useEffect } from 'react'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ( { category } ) => {\n\n    const {data, loading} = useFetchGifs( category );    \n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__fadeIn \"> { category } </h3>  \n\n            { loading && <p className=\" animate__animated animate__flash \"> loading... </p> }\n\n            <div className=\"card-grid\">    \n                <ol>\n                    {\n                        data.map( ( img ) =>(\n                            <GifGridItem \n                                key = { img.id }\n                                { ...img }\n                            />\n                        ))\n                    }\n                </ol>\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from 'react'\nimport { getGift } from '../helpers/getGift'\n\nexport const useFetchGifs = ( category ) => {\n\n    const [state, setstate] = useState({\n        data: [],\n        loading: true,\n    });\n\n    useEffect(() => {\n        getGift( category )\n            .then( img => {\n                setstate({\n                    data: img,\n                    loading: false\n                })                \n            });\n    }, [ category ])\n\n    return state;\n\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid'\n\nconst GifExpertApp = () =>{\n\n    //const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\n    const [categories, setCategories] = useState(['One piece']);\n\n    // const handleAdd = () =>{\n    //     //setCategories( [ 'Pokemons', ...categories]);\n    //     setCategories( cast=> [...categories,'Pokemons']);\n    // }\n\n    return (\n        <>\n           <h2> GifExpertApp </h2>\n           <AddCategory setCategories = { setCategories } />\n           <hr />\n\n            {/* <button onClick ={ handleAdd } > Agregar </button> */}\n\n            <ol>\n                {\n                    categories.map( category =>(\n                        <GifGrid \n                            key= { category }\n                            category = { category } \n                        />\n                    ))\n                }\n            </ol>\n        </>\n    );\n};\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}